security:
    # config/packages/security.yaml
    # ...
    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
        
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\SecurtiryAuthAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            json_login:
                check_path: api_login
            # activate different ways to authenticate
            
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        #
        # the 'ips' option supports IP addresses and subnet masks
        - { path: ^/api/categorie, roles: PUBLIC_ACCESS, ips: [127.0.0.1, ::1, 192.168.0.1/24] }
        - { path: ^/api/categorie, roles: ROLE_NO_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/register,  roles: PUBLIC_ACCESS }
        # - { path: ^/api,       roles: PUBLIC_ACCESS }
        - { path: ^/api/user/, roles: ROLE_USER }
        - { path: ^/home,       roles: IS_AUTHENTICATED_FULLY }
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    
    
    
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon